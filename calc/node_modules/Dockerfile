FROM node:alpine

# Install MySQL connector for Python and other dependencies
RUN apk add --no-cache mariadb-dev \
  && apk add --no-cache --virtual .build-deps \
    build-base \
    mariadb-connector-c-dev \
    python3 \
    py3-pip \
  && pip install mysql-connector-python \
  && apk del .build-deps

# Set the working directory to /app
WORKDIR /app

# Copy the package.json and package-lock.json files to the working directory
COPY package*.json ./

# Install the dependencies
RUN npm install

# Copy the index.html file to the root directory
COPY index.html /

# Expose port 8080
EXPOSE 8080

# Start the server and insert the results into the MySQL database
CMD [ "sh", "-c", ""node server.js""const http = require('http'); const fs = require('fs'); const mysql = require('mysql.connector'); const connection = mysql.createConnection({ host: 'mysql_container_ip_address', user: 'root', password: 'your_password', database: 'your_database' }); connection.connect(); const server = http.createServer((req, res) => {if (req.url === '/') {fs.readFile('/index.html', (err, data) => {if (err) {res.writeHead(500);res.end('Error loading index.html');} else {res.writeHead(200, {'Content-Type': 'text/html'});res.end(data);}});} else if (req.url.startsWith('/square/')) {const number = parseInt(req.url.substring(8));const result = number * number;res.writeHead(200, {'Content-Type': 'text/plain'});res.end('The square of ' + number + ' is ' + result);const sql = 'INSERT INTO square (number, result) VALUES (?, ?)';const values = [number, result];connection.query(sql, values, (error, results) => {if (error) {console.error(error);}});} else if (req.url.startsWith('/cube/')) {const number = parseInt(req.url.substring(6));const result = number * number * number;res.writeHead(200, {'Content-Type': 'text/plain'});res.end('The cube of ' + number + ' is ' + result);const sql = 'INSERT INTO cube (number, result) VALUES (?, ?)';const values = [number, result];connection.query(sql, values, (error, results) => {if (error) {console.error(error);}});} else if (req.url.startsWith('/fibonacci/')) {const number = parseInt(req.url.substring(11));let a = 0;let b = 1;for (let i = 0; i < number; i++) {const c = a + b;a = b;b = c;}const result = a;res.writeHead(
